{"version":3,"sources":["images/oval.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","joke","setJoke","loading","setLoading","fetching","setFetching","useEffect","a","axios","result","data","value","fetchData","className","src","id","onClick","oval","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,2OC6C5BC,EAxCH,WAAO,IAAD,EAEQC,mBAAS,IAFjB,mBAETC,EAFS,KAEHC,EAFG,OAGcF,oBAAS,GAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIgBJ,oBAAS,GAJzB,mBAITK,EAJS,KAICC,EAJD,OAKYN,oBAAS,GALrB,6BAmBhB,OAXAO,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DAChBJ,GAAW,GADK,SAEKK,IAAM,2CAFX,OAEVC,EAFU,OAIhBR,EAAQ,GAAD,OAAIQ,EAAOC,KAAKC,QACvBR,GAAW,GALK,2CAAH,qDAOfS,KACC,CAACR,IAGF,yBAAKS,UAAU,WACb,yBAAKC,IAAI,+IAA+IC,GAAG,aAC3J,4CAAiB,6BAAjB,kBACA,4BAAQC,QAAS,kBAAMX,GAAaD,KAApC,wCAA4F,6BAC3FF,EACC,yBACEW,UAAU,aACVC,IAAKG,IACLC,IAAI,SACJC,OAAO,SAIP,wBAAIN,UAAU,oBAAoBb,KC1BxBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd31b169.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oval.1af174e1.svg\";","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport oval from './images/oval.svg';\n\nconst App = () => {\n\n  const [joke, setJoke] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [fetching, setFetching] = useState(false);\n  const [inProp, setInProp] = useState(false);\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true)\n      const result = await axios(\"https://api.chucknorris.io/jokes/random\");\n      //console.log(result.data);\n      setJoke(`${result.data.value}`)\n      setLoading(false)\n    }\n    fetchData();\n  }, [fetching])\n\n  return (\n    <div className=\"jokeDiv\">\n      <img src=\"https://images02.military.com/sites/default/files/styles/full/public/media/veteran-jobs/content-images/2016/03/chucknorris.jpg?itok=_J3M4O-S\" id=\"chuckImg\"></img>\n      <h1>Chuck Norris <br />Joke Generator</h1>\n      <button onClick={() => setFetching(!fetching)}> In Soviet Russia, button clicks YOU</button><br />\n      {loading ? (\n        <img\n          className=\"loadingImg\"\n          src={oval}\n          alt=\"loader\"\n          height=\"20px\"\n        />\n      ) : (\n\n          <h3 className=\"theJoke bounceIn\">{joke}</h3>\n\n        )}\n    </div >\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}